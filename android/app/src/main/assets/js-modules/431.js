__d(function(e,t,r,o){"use strict";function a(e,t){var r=Object.create(F.prototype);return n(r,t.id),r}function n(e,t){e[c.keys.id]=t,e[c.keys.realm]=t,e[c.keys.type]=c.objectTypes.REALM,["empty","path","readOnly","inMemory","schema","schemaVersion","syncSession","isInTransaction","isClosed","_isPartialRealm"].forEach(function(t){Object.defineProperty(e,t,{get:E.getterForProperty(t)})})}function i(e,t){return"function"==typeof t?h.typeForConstructor(e[c.keys.realm],t):t}Object.defineProperty(o,"__esModule",{value:!0});var s=t(12),c=t(432),l=t(433),u=babelHelpers.interopRequireWildcard(l),p=t(437),y=babelHelpers.interopRequireDefault(p),d=t(438),f=babelHelpers.interopRequireDefault(d),b=t(439),h=babelHelpers.interopRequireWildcard(b),v=t(440),m=babelHelpers.interopRequireDefault(v),g=t(441),j=babelHelpers.interopRequireDefault(g),T=t(442),R=babelHelpers.interopRequireDefault(T),S=t(435),M=babelHelpers.interopRequireWildcard(S),C=t(434),E=babelHelpers.interopRequireWildcard(C),A=t(443),k=s.NativeModules.Realm,L=k.debugHosts,O=k.debugPort;M.registerTypeConverter(c.objectTypes.LIST,p.createList),M.registerTypeConverter(c.objectTypes.RESULTS,d.createResults),M.registerTypeConverter(c.objectTypes.OBJECT,h.createObject),M.registerTypeConverter(c.objectTypes.REALM,a),M.registerTypeConverter(c.objectTypes.USER,v.createUser),M.registerTypeConverter(c.objectTypes.SESSION,g.createSession),M.registerTypeConverter(c.objectTypes.SUBSCRIPTION,T.createSubscription);var F=function(){function e(t){babelHelpers.classCallCheck(this,e);for(var r="object"==typeof t&&t.schema,o=r?{}:null,a=0,i=r?r.length:0;a<i;a++){var s=r[a];if("function"==typeof s){var c=s.schema;if(!c||"object"!=typeof c)throw new Error("Realm object constructor must have a 'schema' property.");var l=c.name,u=c.properties;if(!l||"string"!=typeof l)throw new Error("Failed to read ObjectSchema: name must be of type 'string', got ("+typeof l+")");if(!u||"object"!=typeof u)throw new Error("Failed to read ObjectSchema: properties must be of type 'object', got ("+typeof u+")");r.splice(a,1,c),o[l]=s}}var p=M.createRealm(Array.from(arguments));n(this,p),h.registerConstructors(p,this.path,o)}return babelHelpers.createClass(e,[{key:"create",value:function(e){for(var t=E.createMethod(c.objectTypes.REALM,"create",!0),r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.apply(this,[i(this,e)].concat(o))}},{key:"objects",value:function(e){for(var t=E.createMethod(c.objectTypes.REALM,"objects"),r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.apply(this,[i(this,e)].concat(o))}},{key:"objectForPrimaryKey",value:function(e){for(var t=E.createMethod(c.objectTypes.REALM,"objectForPrimaryKey"),r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.apply(this,[i(this,e)].concat(o))}}]),e}();o.default=F,E.createMethods(F.prototype,c.objectTypes.REALM,["addListener","removeListener","removeAllListeners","close","privileges","writeCopyTo","_waitForDownload","_objectForObjectId"]),E.createMethods(F.prototype,c.objectTypes.REALM,["delete","deleteModel","deleteAll","write","compact","beginTransaction","commitTransaction","cancelTransaction"],!0);var P={_initializeSyncManager:function(e){return M._initializeSyncManager([e])},reconnect:function(){return M.reconnect()},_hasExistingSessions:function(){return M.hasExistingSessions()},User:m.default,Session:j.default,Subscription:R.default};Object.defineProperties(F,{Collection:{value:u.default},List:{value:y.default},Results:{value:f.default},Object:{value:h.default},Sync:{value:P},defaultPath:{get:E.getterForProperty("defaultPath"),set:E.setterForProperty("defaultPath")},schemaVersion:{value:function(e,t){return M.callMethod(void 0,F[c.keys.id],"schemaVersion",Array.from(arguments))}},deleteFile:{value:function(e){return M.callMethod(void 0,F[c.keys.id],"deleteFile",Array.from(arguments))}},copyBundledRealmFiles:{value:function(){return M.callMethod(void 0,F[c.keys.id],"copyBundledRealmFiles",[])}},clearTestState:{value:function(){u.clearMutationListeners(),h.clearRegisteredConstructors(),M.clearTestState()}},_asyncOpen:{value:function(){return M.callMethod(void 0,F[c.keys.id],"_asyncOpen",Array.from(arguments))}}});for(var w=0,_=L.length;w<_;w++)try{var H=A.static._refreshAccessToken.bind(m.default);F[c.keys.id]=M.createSession(H,L[w]+":"+O);break}catch(e){if(w<_-1)continue;throw console.error(e),new Error("Realm failed to connect to the embedded debug server inside the app. If attempting to use Chrome debugging from a device, ensure the device is reachable on the same network as this machine.")}},431);